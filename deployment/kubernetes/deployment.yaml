# SPDX-License-Identifier: Apache-2.0
# Copyright Contributors to the Egeria project.
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: egeria-connector
  name: egeria-connector-service
spec:
  ports:
  - name: egeria
    port: 9443
    protocol: TCP
    targetPort: egeria-port
  - name: debug
    port: 5005
    protocol: TCP
    targetPort: debug-port
  selector:
    app.kubernetes.io/name: egeria-connector
    sas.com/deployment: sas-viya
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    sas.com/certificate-file-format: jks
  name: egeria-connector-ss
  labels:
    app.kubernetes.io/name: egeria-connectors
spec:
  replicas: 1
  serviceName: egeria-connector-service
  selector:
    matchLabels:
      app.kubernetes.io/name: egeria-connector
  template:
    metadata:
      annotations:
        sas.com/certificate-file-format: jks
      labels:
        app.kubernetes.io/name: egeria-connector
    spec:
      imagePullSecrets: []
      containers:
        - name: egeria
          image: odpi/egeria-connector-sas-viya
          env:
            - name: RABBITMQ_USER
              valueFrom:
                secretKeyRef:
                  name: sas-rabbitmq-server-secret
                  key: RABBITMQ_DEFAULT_USER
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: sas-rabbitmq-server-secret
                  key: RABBITMQ_DEFAULT_PASS
            - name: EGERIA_SERVER_NAME
              value: SASRepositoryProxy
          ports:
            - name: egeria-port
              containerPort: 9443
            - name: debug-port
              containerPort: 5005
          # No other checks until this passes
          startupProbe:
            tcpSocket:
              port: egeria-port
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 25
          # Is pod ready to service network requests - it will pause (for replicas, others will take the load)
          readinessProbe:
            tcpSocket:
              port: egeria-port
            periodSeconds: 10
            failureThreshold: 3
          # Is pod doing useful work - if not we will restart it
          livenessProbe:
            tcpSocket:
              port: egeria-port
            periodSeconds: 10
            failureThreshold: 6
          resources: {}
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      restartPolicy: Always
      volumes:
        - emptyDir: {}
          name: tmp
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/affinity-mode: persistent
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /open-metadata/$2
    nginx.ingress.kubernetes.io/session-cookie-name: sas-ingress-nginx
    nginx.ingress.kubernetes.io/session-cookie-path: /open-metadata/
    nginx.ingress.kubernetes.io/session-cookie-samesite: Lax
    sas.com/kustomize-base: base
  labels:
    app.kubernetes.io/name: egeria-connector-ingress-open-metadata
    sas.com/admin: namespace
  name: egeria-connector-ingress-open-metadata
spec:
  rules:
  - host: $(INGRESS_HOST)
    http:
      paths:
      - backend:
          service:
            name: egeria-connector-service
            port:
              number: 9443
        path: /open-metadata(/|$)(.*)
        pathType: ImplementationSpecific
  - host: '*.$(INGRESS_HOST)'
    http:
      paths:
      - backend:
          service:
            name: egeria-connector-service
            port:
              number: 9443
        path: /open-metadata(/|$)(.*)
        pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/affinity-mode: persistent
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/proxy-body-size: 2048m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /servers/$2
    nginx.ingress.kubernetes.io/session-cookie-name: sas-ingress-nginx
    nginx.ingress.kubernetes.io/session-cookie-path: /servers/
    nginx.ingress.kubernetes.io/session-cookie-samesite: Lax
    sas.com/kustomize-base: base
  labels:
    app.kubernetes.io/name: egeria-connector-ingress-servers
    sas.com/admin: namespace
  name: egeria-connector-ingress-servers
spec:
  rules:
  - host: $(INGRESS_HOST)
    http:
      paths:
      - backend:
          service:
            name: egeria-connector-service
            port:
              number: 9443
        path: /servers(/|$)(.*)
        pathType: ImplementationSpecific
  - host: '*.$(INGRESS_HOST)'
    http:
      paths:
      - backend:
          service:
            name: egeria-connector-service
            port:
              number: 9443
        path: /servers(/|$)(.*)
        pathType: ImplementationSpecific
